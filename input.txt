(+ 1 (* 2 3) (/ 3 (- 5 1)))
(min (+ 1 3) 2 (/ 1 5))
(expt 5 2)
(expt (- 5 1) (* 2 2))
(log 4 2)
(log 2.7)
(remainder 4.0 2.0)
(+ 3 (if (= 2 (* 1 3)) 2 3))
(+ 1)
(cond ((< 1 2) 1 2) ((= 1 2) 3))
(+ 1 (begin (+ 1 2) (- 3 2) (* 6 1)))
(= 1)
(+)
(define p 3)
(let ((a 1) (b 2)) (let ((a 2)) (+ a b p)))
(set! p (+ p 3))
(let ((a (+ 3 4)) (b 3)) (+ a b p))
(write 2) (write 3) (writeln 5)
((lambda (a b) (+ a b)) 1 2)
(define add (lambda (a b) (+ a b)))
(add 3 4)
(define identical (lambda (n) (- (+ n 1) 1)))
(identical 1)
(define fac (lambda (n) (
    if (zero? n) 1 (* n (fac (- n 1))))))
(fac 50)
(define fun (lambda (n) (begin
    (if (> n 10)
        (define funfun (lambda (a b) (* a b)))                          ; this is not allowed in scheme
        (define funfun (lambda (a b) (/ a b)))))))
(fun 0)
(funfun 5 6)
(define sumN (lambda (n) (
    if (< n 1) 0 (+ n (sumN (- n 1))))))
(sumN 100)